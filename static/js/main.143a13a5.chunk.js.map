{"version":3,"sources":["logo.svg","assets/backgroundPath.png","assets/logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","React","useState","secs","setSecs","playing","setPlaying","descanso","setDescanso","prettifyNumber","number","numString","length","useEffect","int","setInterval","onClickReset","pushNotification","clearInterval","onClickPause","title","body","NotificationObj","Notification","permission","requestPermission","perm","className","style","backgroundColor","src","require","Math","floor","display","flexDirection","justifyContent","onClick","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,kCCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,kC,kGC2H5BC,MAvHf,WAAgB,IAAD,EACWC,IAAMC,SAAS,GAD1B,mBACNC,EADM,KACAC,EADA,OAEiBH,IAAMC,UAAS,GAFhC,mBAENG,EAFM,KAEGC,EAFH,OAGmBL,IAAMC,UAAS,GAHlC,mBAGNK,EAHM,KAGIC,EAHJ,KAMLC,EAAiB,SAACC,GACpB,IAAIC,EAAYD,EAAO,GACvB,OAAIC,EAAUC,OAAS,EACZ,IAAID,EAERD,GAIXT,IAAMY,WAAW,WACb,IAAIC,EAAMC,aAAY,cAAU,KAmBhC,OAlBIV,IACIE,EACa,OAATJ,IACAa,IACAC,EAAiB,gBAAiB,uFAClCT,GAAY,IAGH,MAATL,IACAa,IACAC,EAAiB,gBAAiB,6EAClCT,GAAY,IAGpBM,EAAMC,aAAY,WACdX,EAAQD,EAAO,KAChB,MAEA,kBAAMe,cAAcJ,OAG/B,IAIMK,EAAe,WACjBb,GAAW,IAGTU,EAAe,WACjBG,IACAf,EAAQ,IAGNa,EAAmB,SAACG,EAAOC,GAC7B,IAAIC,EAAkB,CAClBF,MAAOA,EACPC,KAAMA,GAEqB,WAA3BE,aAAaC,WACb,IAAID,aAAaD,EAAgBF,MAAOE,GAExCC,aAAaE,mBAAkB,SAAAC,GACf,WAARA,GACA,IAAIH,aAAaD,EAAgBF,MAAOE,OAgB1D,OACE,yBAAKK,UAAU,MAAMC,MAAOrB,EAAW,CAACsB,gBAAiB,WAAa,IAClE,yBAAKF,UAAW,kBACZ,yBAAKG,IAAKC,EAAQ,MAClB,yBAAKJ,UAAW,QACZ,yBAAKG,IAAKC,EAAQ,QAG1B,yBAAKJ,UAAW,WACZ,2BAlBAtB,IAAYE,EACL,qBACAF,GAAWE,EACX,uBAEA,WAcP,4BACKE,EAAeuB,KAAKC,MAAM9B,EAAO,GAAK,KAD3C,IAEMM,EAAeuB,KAAKC,MAAM9B,EAAO,KAFvC,IAGMM,EAAeN,EAAO,KAE5B,yBAAKwB,UAAW,UAAWC,MAAO,CAACM,QAAS,OAAQC,cAAe,MAAOC,eAAgB,WACtF,wBAAIC,QAAS,WACThC,EAAWc,IAvDvBb,GAAW,KAwDCD,EAAU,SAAW,cACzB,wBAAIgC,QAAS,WACTrB,MADJ,UAIJ,4BAAQqB,QAAS,WACL9B,GACAC,GAAY,GACZQ,MAEAR,GAAY,GACZQ,MAELY,MAAOrB,EAAW,CAAC+B,MAAO,WAAa,IACzC/B,EAAW,sBAAwB,wBAG5C,yBAAKoB,UAAW,UACZ,yECzGQY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.143a13a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/backgroundPath.7728da74.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.62e76a53.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n    let [secs, setSecs] = React.useState(0);\n    let [playing, setPlaying] = React.useState(false);\n    let [descanso, setDescanso] = React.useState(false);\n\n    //deixar o número bonito\n    const prettifyNumber = (number) => {\n        let numString = number+\"\";\n        if (numString.length < 2) {\n            return \"0\"+numString;\n        }\n        return number;\n    }\n\n    //Contar\n    React.useEffect( () => {\n        let int = setInterval(() => {}, 1000);\n        if (playing) {\n            if (descanso) {\n                if (secs === 25 * 60) {\n                    onClickReset();\n                    pushNotification('PomodoroTimer', 'Seu tempo de descanso acabou! Você agora pode voltar descansado para o trabalho!');\n                    setDescanso(false);\n                }\n            } else {\n                if (secs === 5 * 60) {\n                    onClickReset();\n                    pushNotification('PomodoroTimer', 'Seu tempo de trabalho acabou! Você agora pode descansar por 5 minutos!');\n                    setDescanso(true);\n                }\n            }\n            int = setInterval(() => {\n                setSecs(secs + 1);\n            }, 1000);\n        }\n        return () => clearInterval(int);\n    });\n\n    const onClickStart = () => {\n        setPlaying(true);\n    }\n\n    const onClickPause = () => {\n        setPlaying(false);\n    }\n\n    const onClickReset = () => {\n        onClickPause();\n        setSecs(0);\n    }\n\n    const pushNotification = (title, body) => {\n        let NotificationObj = {\n            title: title,\n            body: body,\n        }\n        if (Notification.permission == 'granted') {\n            new Notification(NotificationObj.title, NotificationObj);\n        } else {\n            Notification.requestPermission(perm => {\n                if (perm == 'granted') {\n                    new Notification(NotificationObj.title, NotificationObj);\n                }\n            })\n        }\n    }\n\n    const status = () => {\n        if (playing && !descanso) {\n            return 'HORA DE TRABALHAR!';\n        } else if (playing && descanso) {\n            return 'HORA DE DESCANSAR...';\n        } else {\n            return 'PAUSADO';\n        }\n    }\n\n  return (\n    <div className=\"App\" style={descanso ? {backgroundColor: '#A4CA5C'} : {}}>\n        <div className={'container_logo'}>\n            <img src={require('./assets/backgroundPath.png')} />\n            <div className={'logo'}>\n                <img src={require('./assets/logo.svg')} />\n            </div>\n        </div>\n        <div className={'content'}>\n            <p>{status()}</p>\n            <h1>\n                {prettifyNumber(Math.floor(secs / 60 / 60))}\n                :{prettifyNumber(Math.floor(secs / 60))}\n                :{prettifyNumber(secs % 60)}\n            </h1>\n            <div className={'buttons'} style={{display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\n                <h2 onClick={() => {\n                    playing ?  onClickPause(): onClickStart()\n                }}>{playing ? \"Pausar\" : \"Começar\"}</h2>\n                <h2 onClick={() => {\n                    onClickReset();\n                }}>Parar</h2>\n            </div>\n            <button onClick={() => {\n                    if (descanso) {\n                        setDescanso(false);\n                        onClickReset();\n                    } else {\n                        setDescanso(true);\n                        onClickReset();\n                    }\n                }} style={descanso ? {color: '#A4CA5C'} : {}}>\n                {descanso ? \"Pular para Trabalho\" : \"Pular para Descanso\"}\n            </button>\n        </div>\n        <div className={'footer'}>\n            <p>Criado por Brian, Quem se Importa Ldta.</p>\n        </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}